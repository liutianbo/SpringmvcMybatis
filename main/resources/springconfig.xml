<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="   
           http://www.springframework.org/schema/beans   
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
           http://www.springframework.org/schema/context   
           http://www.springframework.org/schema/context/spring-context-3.0.xsd  
           http://www.springframework.org/schema/mvc   
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
           http://www.springframework.org/schema/tx  
   		   http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	<!-- 注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。
		即解决了@Controller注解的使用前提配置。
		DefaultAnnotationHandlerMapping : 他可以将请求来的url和被注解了@RequesMapping的值进行匹配。当然定义其他的HandleMapping也可以
									      DefaultAnnotationHandlerMapping本身支持自定义拦截器
		AnnotationMethodHandlerAdapter  Spring MVC 中，如果我们没有注册任何 HandlerAdaptor 到容器中，注意，我说的是任何。那么 DispatcherServlet 将启用后备的几个默认使用的 HandlerAdaptor 实现，包括：  
										  org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter  
										  org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter  
										  org.springframework.web.servlet.mvc.AnnotationMethodHandlerAdaptor 
	 -->
	<mvc:annotation-driven />
	<!-- 对包进行扫描，实现注释驱动Bean定义，同时将bean自动注入容器中使用  -->
	<context:component-scan base-package="com.ltb" />
	
	<!-- mybatis配置 -->
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"></property>
		<property name="username" value="ltb"></property>
		<property name="password" value="284556589"></property>
	</bean>
	<!--  为事务管理器指定的 DataSource 必须和用来创建 SqlSessionFactoryBean 的 是同一个数据源,否则事务管理器就无法工作了。 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:annotation-driven/>
	<!-- Spring 会自动 使用任意存在的容器事务,在上面附加一个 SqlSession。如果没有开始事务,或者需要基 于事务配置,Spring 会开启一个新的容器管理事务。 
	<tx:jta-transaction-manager />-->
	<!-- 用于创建SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath*:mybatis/mapper/**/*.xml"></property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
		<property name="basePackage" value="com.ltb.tmp.mapper"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<!-- mybatis配置 -->
	
</beans>
